
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 02 21:37:20 ART 2016
//----------------------------------------------------

package examples.while_ut1;

import examples.while_ut1.ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 02 21:37:20 ART 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\002\005\000\002\002\004\000\002\002\005" +
    "\000\002\002\006\000\002\002\006\000\002\002\010\000" +
    "\002\002\007\000\002\002\011\000\002\002\005\000\002" +
    "\007\002\000\002\007\006\000\002\010\002\000\002\010" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\006\000\002\003\006\000\002\003\011\000\002\003" +
    "\006\000\002\006\002\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\032\006\013\021\006\031\017\033\021\036" +
    "\015\037\004\040\014\043\020\044\007\045\005\046\011" +
    "\050\012\001\002\000\026\004\022\005\023\006\033\007" +
    "\027\010\026\013\032\022\031\041\024\042\034\052\025" +
    "\001\002\000\004\006\uffef\001\002\000\034\006\uffd7\021" +
    "\uffd7\024\uffd7\031\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7\001\002\000" +
    "\004\006\ufff0\001\002\000\004\002\135\001\002\000\004" +
    "\006\ufff1\001\002\000\026\004\022\005\023\006\033\007" +
    "\027\010\026\013\032\022\031\041\024\042\034\052\025" +
    "\001\002\000\004\023\125\001\002\000\004\010\121\001" +
    "\002\000\004\020\120\001\002\000\004\006\113\001\002" +
    "\000\014\032\102\043\020\044\007\045\005\046\011\001" +
    "\002\000\004\006\uffee\001\002\000\026\004\022\005\023" +
    "\006\033\007\027\010\026\013\032\022\031\041\024\042" +
    "\034\052\025\001\002\000\034\011\uffeb\012\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\025\uffeb\026\uffeb\030" +
    "\uffeb\034\uffeb\035\uffeb\051\uffeb\001\002\000\034\011\uffea" +
    "\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\025" +
    "\uffea\026\uffea\030\uffea\034\uffea\035\uffea\051\uffea\001\002" +
    "\000\004\010\075\001\002\000\034\011\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\025\uffe9\026\uffe9" +
    "\030\uffe9\034\uffe9\035\uffe9\051\uffe9\001\002\000\026\004" +
    "\022\005\023\006\033\007\027\010\026\013\032\022\031" +
    "\041\024\042\034\052\025\001\002\000\026\004\022\005" +
    "\023\006\033\007\027\010\026\013\032\022\031\041\024" +
    "\042\034\052\025\001\002\000\022\012\051\015\044\016" +
    "\046\017\043\020\065\025\045\026\047\051\050\001\002" +
    "\000\034\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\025\uffe2\026\uffe2\030\uffe2\034\uffe2\035\uffe2" +
    "\051\uffe2\001\002\000\034\011\uffe1\012\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\025\uffe1\026\uffe1\030\uffe1" +
    "\034\uffe1\035\uffe1\051\uffe1\001\002\000\040\010\040\011" +
    "\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\023\041\025\uffe8\026\uffe8\030\uffe8\034\uffe8\035\uffe8\051" +
    "\uffe8\001\002\000\004\010\035\001\002\000\004\006\036" +
    "\001\002\000\004\011\037\001\002\000\034\011\uffdb\012" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\025\uffdb" +
    "\026\uffdb\030\uffdb\034\uffdb\035\uffdb\051\uffdb\001\002\000" +
    "\006\011\ufff3\034\ufff3\001\002\000\026\004\022\005\023" +
    "\006\033\007\027\010\026\013\032\022\031\041\024\042" +
    "\034\052\025\001\002\000\034\011\uffdc\012\051\014\uffdc" +
    "\015\044\016\046\017\043\020\uffdc\025\045\026\047\030" +
    "\uffdc\034\uffdc\035\uffdc\051\050\001\002\000\026\004\022" +
    "\005\023\006\033\007\027\010\026\013\032\022\031\041" +
    "\024\042\034\052\025\001\002\000\026\004\022\005\023" +
    "\006\033\007\027\010\026\013\032\022\031\041\024\042" +
    "\034\052\025\001\002\000\026\004\022\005\023\006\033" +
    "\007\027\010\026\013\032\022\031\041\024\042\034\052" +
    "\025\001\002\000\026\004\022\005\023\006\033\007\027" +
    "\010\026\013\032\022\031\041\024\042\034\052\025\001" +
    "\002\000\026\004\022\005\023\006\033\007\027\010\026" +
    "\013\032\022\031\041\024\042\034\052\025\001\002\000" +
    "\026\004\022\005\023\006\033\007\027\010\026\013\032" +
    "\022\031\041\024\042\034\052\025\001\002\000\026\004" +
    "\022\005\023\006\033\007\027\010\026\013\032\022\031" +
    "\041\024\042\034\052\025\001\002\000\034\011\uffe7\012" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\025\045" +
    "\026\047\030\uffe7\034\uffe7\035\uffe7\051\050\001\002\000" +
    "\034\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\025\uffe0\026\uffe0\030\uffe0\034\uffe0\035\uffe0\051" +
    "\uffe0\001\002\000\034\011\uffdf\012\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\025\uffdf\026\uffdf\030\uffdf\034" +
    "\uffdf\035\uffdf\051\uffdf\001\002\000\034\011\uffe6\012\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\025\045\026" +
    "\047\030\uffe6\034\uffe6\035\uffe6\051\050\001\002\000\034" +
    "\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\025\uffdd\026\047\030\uffdd\034\uffdd\035\uffdd\051\050" +
    "\001\002\000\034\011\uffe5\012\051\014\uffe5\015\uffe5\016" +
    "\046\017\uffe5\020\uffe5\025\045\026\047\030\uffe5\034\uffe5" +
    "\035\uffe5\051\050\001\002\000\034\011\uffe4\012\051\014" +
    "\uffe4\015\uffe4\016\046\017\uffe4\020\uffe4\025\045\026\047" +
    "\030\uffe4\034\uffe4\035\uffe4\051\050\001\002\000\006\011" +
    "\063\034\062\001\002\000\026\004\022\005\023\006\033" +
    "\007\027\010\026\013\032\022\031\041\024\042\034\052" +
    "\025\001\002\000\034\011\uffd8\012\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\025\uffd8\026\uffd8\030\uffd8\034" +
    "\uffd8\035\uffd8\051\uffd8\001\002\000\024\011\ufff2\012\051" +
    "\015\044\016\046\017\043\025\045\026\047\034\ufff2\051" +
    "\050\001\002\000\040\002\ufff6\006\ufff6\021\ufff6\024\ufff6" +
    "\031\ufff6\033\ufff6\036\ufff6\037\ufff6\040\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\001\002\000\034" +
    "\011\uffde\012\051\014\uffde\015\044\016\046\017\043\020" +
    "\uffde\025\045\026\047\030\uffde\034\uffde\035\uffde\051\050" +
    "\001\002\000\022\011\070\012\051\015\044\016\046\017" +
    "\043\025\045\026\047\051\050\001\002\000\036\011\uffe3" +
    "\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\025" +
    "\uffe3\026\uffe3\027\071\030\uffe3\034\uffe3\035\uffe3\051\uffe3" +
    "\001\002\000\026\004\022\005\023\006\033\007\027\010" +
    "\026\013\032\022\031\041\024\042\034\052\025\001\002" +
    "\000\022\012\051\015\044\016\046\017\043\025\045\026" +
    "\047\030\073\051\050\001\002\000\026\004\022\005\023" +
    "\006\033\007\027\010\026\013\032\022\031\041\024\042" +
    "\034\052\025\001\002\000\034\011\uffd9\012\051\014\uffd9" +
    "\015\044\016\046\017\043\020\uffd9\025\045\026\047\030" +
    "\uffd9\034\uffd9\035\uffd9\051\050\001\002\000\026\004\022" +
    "\005\023\006\033\007\027\010\026\013\032\022\031\041" +
    "\024\042\034\052\025\001\002\000\022\011\077\012\051" +
    "\015\044\016\046\017\043\025\045\026\047\051\050\001" +
    "\002\000\034\011\uffda\012\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\025\uffda\026\uffda\030\uffda\034\uffda\035" +
    "\uffda\051\uffda\001\002\000\004\006\103\001\002\000\004" +
    "\006\uffed\001\002\000\004\006\uffec\001\002\000\004\010" +
    "\104\001\002\000\006\011\ufff5\034\ufff5\001\002\000\006" +
    "\011\107\034\106\001\002\000\012\043\020\044\007\045" +
    "\005\046\011\001\002\000\032\006\013\021\006\031\017" +
    "\033\021\036\015\037\004\040\014\043\020\044\007\045" +
    "\005\046\011\050\012\001\002\000\040\002\ufff7\006\ufff7" +
    "\021\ufff7\024\ufff7\031\ufff7\033\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\001\002\000\004\006\112\001\002\000\006\011\ufff4\034" +
    "\ufff4\001\002\000\006\020\114\023\115\001\002\000\040" +
    "\002\ufffe\006\ufffe\021\ufffe\024\ufffe\031\ufffe\033\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\001\002\000\026\004\022\005\023\006" +
    "\033\007\027\010\026\013\032\022\031\041\024\042\034" +
    "\052\025\001\002\000\022\012\051\015\044\016\046\017" +
    "\043\020\117\025\045\026\047\051\050\001\002\000\040" +
    "\002\uffff\006\uffff\021\uffff\024\uffff\031\uffff\033\uffff\036" +
    "\uffff\037\uffff\040\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\001\002\000\040\002\ufffd\006\ufffd\021" +
    "\ufffd\024\ufffd\031\ufffd\033\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\001" +
    "\002\000\026\004\022\005\023\006\033\007\027\010\026" +
    "\013\032\022\031\041\024\042\034\052\025\001\002\000" +
    "\022\011\123\012\051\015\044\016\046\017\043\025\045" +
    "\026\047\051\050\001\002\000\004\020\124\001\002\000" +
    "\040\002\ufff8\006\ufff8\021\ufff8\024\ufff8\031\ufff8\033\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\001\002\000\026\004\022\005\023" +
    "\006\033\007\027\010\026\013\032\022\031\041\024\042" +
    "\034\052\025\001\002\000\022\012\051\015\044\016\046" +
    "\017\043\020\127\025\045\026\047\051\050\001\002\000" +
    "\040\002\000\006\000\021\000\024\000\031\000\033\000" +
    "\036\000\037\000\040\000\043\000\044\000\045\000\046" +
    "\000\047\000\050\000\001\002\000\022\012\051\014\131" +
    "\015\044\016\046\017\043\025\045\026\047\051\050\001" +
    "\002\000\032\006\013\021\006\031\017\033\021\036\015" +
    "\037\004\040\014\043\020\044\007\045\005\046\011\050" +
    "\012\001\002\000\040\002\ufffa\006\ufffa\021\ufffa\024\ufffa" +
    "\031\ufffa\033\ufffa\036\ufffa\037\ufffa\040\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\047\133\050\ufffa\001\002\000\032" +
    "\006\013\021\006\031\017\033\021\036\015\037\004\040" +
    "\014\043\020\044\007\045\005\046\011\050\012\001\002" +
    "\000\040\002\ufff9\006\ufff9\021\ufff9\024\ufff9\031\ufff9\033" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\001\002\000\004\002\001\001" +
    "\002\000\034\006\013\021\006\024\140\031\017\033\021" +
    "\036\015\037\004\040\014\043\020\044\007\045\005\046" +
    "\011\050\012\001\002\000\034\006\uffd6\021\uffd6\024\uffd6" +
    "\031\uffd6\033\uffd6\036\uffd6\037\uffd6\040\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\050\uffd6\001\002\000\040\002\ufffc" +
    "\006\ufffc\021\ufffc\024\ufffc\031\ufffc\033\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\001\002\000\022\012\051\015\044\016\046\017" +
    "\043\025\045\026\047\035\142\051\050\001\002\000\032" +
    "\006\013\021\006\031\017\033\021\036\015\037\004\040" +
    "\014\043\020\044\007\045\005\046\011\050\012\001\002" +
    "\000\040\002\ufffb\006\ufffb\021\ufffb\024\ufffb\031\ufffb\033" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\050\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\002\007\004\015\001\001\000\004\003" +
    "\140\001\001\000\002\001\001\000\004\006\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\100\005" +
    "\077\001\001\000\002\001\001\000\004\003\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\066\001\001\000\004\003\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\060\001" +
    "\001\000\004\003\041\001\001\000\002\001\001\000\004" +
    "\003\057\001\001\000\004\003\056\001\001\000\004\003" +
    "\055\001\001\000\004\003\054\001\001\000\004\003\053" +
    "\001\001\000\004\003\052\001\001\000\004\003\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\071\001\001\000\002\001\001\000\004\003\073\001" +
    "\001\000\002\001\001\000\004\003\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\104" +
    "\001\001\000\002\001\001\000\004\004\110\001\001\000" +
    "\006\002\107\004\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\131\004\015\001\001\000\002" +
    "\001\001\000\006\002\133\004\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\136\004\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\142\004\015\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]!", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // repeat$stmt ::= repeat$stmt stmt 
            {
              List<Stmt> RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> $1 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt $2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Stmt> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // repeat$stmt ::= 
            {
              List<Stmt> RESULT =null;
		 List<Stmt> $0;
		$0 = new ArrayList<Stmt>();
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat$stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= ID LEFT_PARENTHESIS parametros RIGHT_PARENTHESIS 
            {
              Exp RESULT =null;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String $4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Exp> $2 = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall($4, $2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= LEFT_PARENTHESIS exp RIGHT_PARENTHESIS QUESTION_MARK exp COLON exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TernaryOperator($1, $2, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= LENGTH LEFT_PARENTHESIS exp RIGHT_PARENTHESIS 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Length($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= DEFINED LEFT_PARENTHESIS ID RIGHT_PARENTHESIS 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Defined($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= ID EQUALS_SIGN exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExp($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp DOUBLE_AMPERSAND exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Conjunction($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= EXCLAMATION_MARK exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negation($2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp LESS_THAN_OR_EQUAL exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompareLessOrEqual($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp DOUBLE_EQUALS_SIGN exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompareEqual($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= FALSE 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TruthValue(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= TRUE 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TruthValue(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= LEFT_PARENTHESIS exp RIGHT_PARENTHESIS 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp $2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = $2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp HYPHEN_MINUS exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Subtraction($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp PLUS_SIGN exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Addition($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp SLASH exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Division($1, $3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp ASTERISK exp 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiplication($1, $3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= ID 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable($1,$1left,$1right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= STR 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Str($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= NUMInt 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer $1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new  Numeral($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= NUM 
            {
              Exp RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double $1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Numeral($1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipoFuncionesDef ::= VOID 
            {
              String RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new String("Void"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoFuncionesDef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipoFuncionesDef ::= tipo 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoFuncionesDef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= TBOOL 
            {
              String RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new String("Boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= TNUM 
            {
              String RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new String("Double"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= TINT 
            {
              String RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new String("Integer"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= TSTR 
            {
              String RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new String("String"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= parametros COMMA exp 
            {
              ArrayList<Exp> RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Exp> $1 = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp $2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Exp> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros ::= 
            {
              ArrayList<Exp> RESULT =null;
		 ArrayList<Exp> $0;
		$0 = new ArrayList<Exp>();
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametrosConTipo ::= parametrosConTipo COMMA tipo ID 
            {
              LinkedHashMap<String,String> RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedHashMap<String,String> $1 = (LinkedHashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedHashMap<String, String> $0;
		$1.put($2, $3); $0 = $1;
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosConTipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametrosConTipo ::= 
            {
              LinkedHashMap<String,String> RESULT =null;
		 LinkedHashMap<String, String> $0;
		$0 = new LinkedHashMap<String, String>();
		RESULT = $0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrosConTipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= RETURN exp SEMICOLON 
            {
              Stmt RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return($1, $1left, $1right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= FUNCTION tipoFuncionesDef ID LEFT_PARENTHESIS parametrosConTipo RIGHT_PARENTHESIS stmt 
            {
              Stmt RESULT =null;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object $5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String $4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedHashMap<String,String> $2 = (LinkedHashMap<String,String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt $3 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionDeclaration($4, $1, $2, $3, $5left, $5right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= PRINT LEFT_PARENTHESIS exp RIGHT_PARENTHESIS SEMICOLON 
            {
              Stmt RESULT =null;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print($1,$2left, $2right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= IF exp THEN stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp $2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt $4 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt $6 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfThenElse($2, $4, $6); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= IF exp THEN stmt 
            {
              Stmt RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt $4 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfThen($2, $4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= WHILE exp DO stmt 
            {
              Stmt RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp $2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt $4 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileDo($2, $4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= LEFT_CURLY_BRACKET repeat$stmt RIGHT_CURLY_BRACKET 
            {
              Stmt RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> $2 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sequence($2.toArray(new Stmt[$2.size()])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= SKIP SEMICOLON 
            {
              Stmt RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object $1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sequence(new Stmt[0]); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= tipo ID SEMICOLON 
            {
              Stmt RESULT =null;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String $5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentStmtWithType($5, $1,null,$5left, $5right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt ::= tipo ID EQUALS_SIGN exp SEMICOLON 
            {
              Stmt RESULT =null;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String $5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentStmtWithType($5, $1, $3, $5left, $5right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // stmt ::= ID EQUALS_SIGN exp SEMICOLON 
            {
              Stmt RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object $2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp $3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object $4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentStmt($1, $3,$1left, $1right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= stmt EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt start_val = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

