package examples.while_ut1;

import examples.while_ut1.ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

parser code {:

	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]!", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}

:}

non terminal Stmt stmt;
non terminal Exp exp;
non terminal String tipo;
non terminal String tipoFuncionesDef;

terminal Double NUM;
terminal Integer NUMInt;
terminal String ID;
terminal EXCLAMATION_MARK;
terminal LEFT_PARENTHESIS;
terminal RIGHT_PARENTHESIS;
terminal ASTERISK;
terminal FALSE;
terminal THEN;
terminal PLUS_SIGN;
terminal SLASH;
terminal HYPHEN_MINUS;
terminal SEMICOLON;
terminal LEFT_CURLY_BRACKET;
terminal TRUE;
terminal EQUALS_SIGN;
terminal RIGHT_CURLY_BRACKET;
terminal DOUBLE_AMPERSAND;
terminal LESS_THAN_OR_EQUAL;
terminal QUESTION_MARK;
terminal COLON;
terminal FUNCTION;
terminal VOID;
terminal RETURN;
terminal COMMA;

non terminal List<Stmt> repeat$stmt;
non terminal LinkedHashMap<String, String> parametrosConTipo;
non terminal ArrayList<Exp> parametros;
terminal DO;
terminal SKIP;
terminal WHILE;
terminal PRINT;
terminal LENGTH;
terminal DEFINED;
terminal String TBOOL;
terminal String TINT;
terminal String TNUM;
terminal String TSTR;
terminal ELSE;
terminal IF;
terminal DOUBLE_EQUALS_SIGN;
terminal String STR;

precedence left EXCLAMATION_MARK;
precedence left PLUS_SIGN, HYPHEN_MINUS;
precedence left ASTERISK, SLASH;
precedence left DOUBLE_AMPERSAND;
precedence left ELSE;
precedence left DOUBLE_EQUALS_SIGN, LESS_THAN_OR_EQUAL;

start with stmt;

stmt ::=
		ID:$1 EQUALS_SIGN:$2 exp:$3 SEMICOLON:$4
		{: RESULT = new AssignmentStmt($1, $3,$1left, $1right); :}
	| tipo:$5 ID:$1 EQUALS_SIGN:$2 exp:$3 SEMICOLON:$4
    	{: RESULT = new AssignmentStmtWithType($5, $1, $3, $5left, $5right); :}
  	| tipo:$5 ID:$1 SEMICOLON:$4
    	{: RESULT = new AssignmentStmtWithType($5, $1,null,$5left, $5right); :} 
	|	SKIP:$1 SEMICOLON:$2
		{: RESULT = new Sequence(new Stmt[0]); :}
	|	LEFT_CURLY_BRACKET:$1 repeat$stmt:$2 RIGHT_CURLY_BRACKET:$3
		{: RESULT = new Sequence($2.toArray(new Stmt[$2.size()])); :}
	|	WHILE:$1 exp:$2 DO:$3 stmt:$4
		{: RESULT = new WhileDo($2, $4); :}
	|	IF:$1 exp:$2 THEN:$3 stmt:$4
		{: RESULT = new IfThen($2, $4); :}
	|	IF:$1 exp:$2 THEN:$3 stmt:$4 ELSE:$5 stmt:$6
		{: RESULT = new IfThenElse($2, $4, $6); :}
	|	PRINT:$2 LEFT_PARENTHESIS exp:$1 RIGHT_PARENTHESIS SEMICOLON
		{: RESULT = new Print($1,$2left, $2right); :}
	|	FUNCTION:$5 tipoFuncionesDef:$1 ID:$4 LEFT_PARENTHESIS parametrosConTipo:$2 RIGHT_PARENTHESIS stmt:$3
		{: RESULT = new FunctionDeclaration($4, $1, $2, $3, $5left, $5right); :}
	|	RETURN exp:$1 SEMICOLON
		{: RESULT = new Return($1, $1left, $1right); :}
;

parametrosConTipo ::=  		
		{: LinkedHashMap<String, String> $0;
		$0 = new LinkedHashMap<String, String>();
		RESULT = $0; :}
	|	parametrosConTipo:$1 COMMA tipo:$3 ID:$2
		{: LinkedHashMap<String, String> $0;
		$1.put($2, $3); $0 = $1;
		RESULT = $0; :}
;

parametros ::= 		
		{: ArrayList<Exp> $0;
		$0 = new ArrayList<Exp>();
		RESULT = $0; :}
	|	parametros:$1 COMMA exp:$2
		{: ArrayList<Exp> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; :}
;

tipo ::=
		TSTR:$1
		{: RESULT=new String("String"); :}
		| 	TINT:$1
		{: RESULT=new String("Integer"); :}
		| 	TNUM:$1
		{: RESULT=new String("Double"); :}
		| 	TBOOL:$1
		{: RESULT=new String("Boolean"); :};
		
tipoFuncionesDef ::= 
		tipo:$1
		{: RESULT= $1; :}
		| 	VOID:$1
		{: RESULT=new String("Void"); :}	
;


exp ::=
		NUM:$1
		{: RESULT = new Numeral($1); :}
	|	NUMInt:$1
		{: RESULT = new  Numeral($1); :}
	|	STR:$1
		{: RESULT = new Str($1); :}
	|	ID:$1
		{: RESULT = new Variable($1,$1left,$1right); :}
	|	exp:$1 ASTERISK:$2 exp:$3
		{: RESULT = new Multiplication($1, $3); :}
	|	exp:$1 SLASH:$2 exp:$3
		{: RESULT = new Division($1, $3);:}
	|	exp:$1 PLUS_SIGN:$2 exp:$3
		{: RESULT = new Addition($1, $3); :}
	|	exp:$1 HYPHEN_MINUS:$2 exp:$3
		{: RESULT = new Subtraction($1, $3); :}
	|	LEFT_PARENTHESIS:$1 exp:$2 RIGHT_PARENTHESIS:$3
		{: RESULT = $2; :}
	|	TRUE:$1
		{: RESULT = new TruthValue(true); :}
	|	FALSE:$1
		{: RESULT = new TruthValue(false); :}
	|	exp:$1 DOUBLE_EQUALS_SIGN:$2 exp:$3
		{: RESULT = new CompareEqual($1, $3); :}
	|	exp:$1 LESS_THAN_OR_EQUAL:$2 exp:$3
		{: RESULT = new CompareLessOrEqual($1, $3); :}
	|	EXCLAMATION_MARK:$1 exp:$2
		{: RESULT = new Negation($2); :}
	|	exp:$1 DOUBLE_AMPERSAND:$2 exp:$3
		{: RESULT = new Conjunction($1, $3); :}
	|	ID:$1 EQUALS_SIGN:$2 exp:$3
		{: RESULT = new AssignmentExp($1, $3); :}
	|	DEFINED LEFT_PARENTHESIS ID:$1 RIGHT_PARENTHESIS
		{: RESULT = new Defined($1); :}
	|	LENGTH LEFT_PARENTHESIS exp:$1 RIGHT_PARENTHESIS
		{: RESULT = new Length($1); :}
	|	LEFT_PARENTHESIS  exp:$1 RIGHT_PARENTHESIS QUESTION_MARK exp:$2 COLON exp:$3
		{: RESULT = new TernaryOperator($1, $2, $3); :}
	|	ID:$4 LEFT_PARENTHESIS parametros:$2 RIGHT_PARENTHESIS
		{: RESULT = new FunctionCall($4, $2, $4left, $4right); :}
;




repeat$stmt ::=

		{: List<Stmt> $0;
		$0 = new ArrayList<Stmt>();
		RESULT = $0; :}
	|	repeat$stmt:$1 stmt:$2
		{: List<Stmt> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; :}
;
